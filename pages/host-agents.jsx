import Sidebar from "@/components/Sidebar";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import {
  useToast,
  Text,
  Table,
  InputGroup,
  InputRightElement,
  Popover,
  PopoverTrigger,
  PopoverContent,
  PopoverHeader,
  PopoverBody,
  PopoverCloseButton,
  PopoverAnchor,
  ButtonGroup,
  Td,
  TableCaption,
  TableContainer,
  Flex,
  Button,
  Icon,
  Badge,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
  FormControl,
  Input,
  FormLabel,
  Textarea,
  NumberInput,
  NumberIncrementStepper,
  NumberDecrementStepper,
  NumberInputStepper,
  NumberInputField,
  Select,
} from "@chakra-ui/react";

import { MdDeleteOutline, MdOutlineSearch } from "react-icons/md";

import axios from "axios";
import { useRouter } from "next/router";
import SellerCard from "../components/SellerCard";
import { isAuthenticated } from "@/helper/auth";
import RechargeAgentCard from "@/components/RechargeAgentCard";
import HostAgentCard from "@/components/HostAgentCard";
import { API_URL } from "@/helper/api";

const AssignAgent = () => {
  const router = useRouter();
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [agentId, setAgentId] = useState(null);
  const toast = useToast();

  const auth = isAuthenticated();
  const jwt = auth.data?.jwt;
  const handleAssign = async () => {
    // console.log(agentId);
    let body = {
      data: {
        agent_user: agentId,
      },
    };
    // console.log(body);
    let res = await axios.post(`${API_URL}host-agent-accounts`, body, {
      headers: {
        Authorization: `Bearer ${jwt}`,
      },
    });
    // console.log(res);
    if (res.status !== 200) {
      toast({
        title: "error",
        description: `Couldn't assign agent\n ${res.error?.message}`,
        status: "error",
        duration: 3000,
        isClosable: true,
      });
      onClose();
    } else {
      toast({
        title: "Success",
        description: "Agent assigned successfully",
        status: "success",
        duration: 3000,
        isClosable: true,
      });
      onClose();
      router.reload();
    }
    return res;
  };

  const handleChange = (e) => {
    // console.log(e.target.value);
    setAgentId(e.target.value);
  };

  return (
    <>
      <Button onClick={onOpen} bg="brand.400" color="white">
        Assign Agent
      </Button>

      <Modal isOpen={isOpen} onClose={onClose} isCentered>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Assign Agent</ModalHeader>
          <ModalCloseButton />
          <ModalBody py={5}>
            <Flex>
              <Input
                placeholder="User ID"
                type="number"
                mr={4}
                value={agentId}
                onChange={handleChange}
              />
              <Button color="white" bg="brand.400" onClick={handleAssign}>
                Assign
              </Button>
            </Flex>
          </ModalBody>
        </ModalContent>
      </Modal>
    </>
  );
};

const HostAgent = () => {
  const [hostAgents, setHostAgents] = useState([]);
  const [search, setSearch] = useState(false);
  const toast = useToast();

  let auth = isAuthenticated();
  let jwt = auth.data?.jwt;
  // console.log(jwt);
  const getHostAgents = async () => {
    let res = await axios.get(`${API_URL}host-agent-accounts?populate=*`, {
      headers: {
        Authorization: `Bearer ${jwt}`,
      },
    });
    setHostAgents(res?.data?.data);
    // console.log(res.data.data);
  };

  useEffect(() => {
    getHostAgents();
  }, []);

  return (
    <>
      <Head>
        <title>Peace Garden</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Sidebar>
          <Flex justify={"space-between"}>
            <Text fontSize={"2xl"} fontWeight={"semibold"}>
              Host Agents List
            </Text>
            <AssignAgent />
          </Flex>
          <InputGroup
            maxW="60vw"
            mx="auto"
            mt={6}
            bg="white"
            rounded="md"
            boxShadow={"2xl"}
          >
            <InputRightElement color="brand.400">
              <MdOutlineSearch />
            </InputRightElement>
            <Input
              type="text"
              name="Secrch"
              placeholder="Search..."
              onChange={(e) => setSearch(e.target.value.toLowerCase())}
              py={4}
            />
          </InputGroup>
          <Flex justify={"space-around"} flexWrap={"wrap"} gap={10} mt={10}>
            {hostAgents
              .filter((hostAgent) => {
                if (!search) {
                  return true;
                }

                if (
                  hostAgent.attributes?.agent_user?.data?.id
                    ?.toString()
                    .includes(search) ||
                  hostAgent?.attributes?.agent_user?.data?.attributes?.first_name
                    ?.toLowerCase()
                    .includes(search)
                ) {
                  return true;
                }

                return false;
              })

              .map((hostAgent, i) => {
                return (
                  <HostAgentCard
                    key={i}
                    agentName={
                      hostAgent?.attributes?.agent_user?.data?.attributes
                        ?.first_name
                    }
                    // displayName={HostAgent.attributes.display_name}
                    data={hostAgent}
                  />
                );
              })}
          </Flex>
        </Sidebar>
      </main>
    </>
  );
};

export default HostAgent;

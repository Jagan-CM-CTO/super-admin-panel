import Sidebar from "@/components/Sidebar";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import {
  useToast,
  Text,
  Flex,
  Stat,
  StatLabel,
  StatNumber,
  Button,
  Box,
} from "@chakra-ui/react";
import axios from "axios";
import { isAuthenticated } from "@/helper/auth";
import moment from "moment";
import { BsFillPlayCircleFill, BsPerson } from "react-icons/bs";
import { GiExtraTime } from "react-icons/gi";
import { AiFillPauseCircle, AiOutlineFieldTime } from "react-icons/ai";
import { CgMonday } from "react-icons/cg";
import { API_URL } from "@/helper/api";

const StatsCard = ({ title, stat, icon }) => {
  return (
    <Stat
      px={{ base: 2, md: 4 }}
      py={"7"}
      mb={8}
      shadow={"xl"}
      border={"1px solid"}
      borderColor={"gray.800"}
      rounded={"lg"}
      maxW={"30vw"}
      minW={"30vw"}
    >
      <Flex justifyContent={"space-between"}>
        <Box pl={{ base: 2, md: 4 }}>
          <StatLabel fontWeight={"medium"} isTruncated>
            {title}
          </StatLabel>
          <StatNumber
            fontSize={"2xl"}
            fontWeight={"medium"}
            textTransform={"capitalize"}
          >
            {stat}
          </StatNumber>
        </Box>
        <Box my={"auto"} color={"gray.800"} alignContent={"center"}>
          {icon}
        </Box>
      </Flex>
    </Stat>
  );
};

const Contest = () => {
  const [competition, setCompetition] = useState([]);
  const toast = useToast();

  let auth = isAuthenticated();
  let jwt = auth.data?.jwt;
  // console.log(jwt);
  const getCompetition = async () => {
    let res = await axios.get(`${API_URL}competition`, {
      headers: {
        Authorization: `Bearer ${jwt}`,
      },
    });
    setCompetition(res.data.data);
    console.log(res.data);
  };

  useEffect(() => {
    getCompetition();
  }, []);

  const handleStatusUpdate = async (status) => {
    let body = { status: status };
    if (status === "paused") {
      body.paused_at = new Date();
    }
    let res = await axios.put(
      `${API_URL}competition`,
      { data: body },
      {
        headers: {
          Authorization: `Bearer ${jwt}`,
        },
      }
    );
    if (res.status == 200) {
      toast({
        title: "Success",
        description: "Contest status updated!",
        status: "success",
        duration: 2000,
        isClosable: true,
      });
    } else {
      toast({
        title: "Error",
        description: "Status updation failed!",
        status: "danger",
        duration: 2000,
        isClosable: true,
      });
    }
    console.log(res);
  };

  return (
    <>
      <Head>
        <title>Peace Garden</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Sidebar>
          <Flex justify={"space-between"} mb={8}>
            <Text fontSize={"2xl"} fontWeight={"semibold"}>
              Competition Details
            </Text>
          </Flex>
          <Flex justify={"space-evenly"} flexWrap={"wrap"} gap={5}>
            <StatsCard
              title="Current Day"
              stat={"Day " + competition.attributes?.current_day}
              icon={<CgMonday size={50} />}
            />
            <StatsCard
              title="Started at"
              stat={moment(competition.attributes?.started_at).format(
                "DD-MM-YYYY HH:mm:ss "
              )}
              icon={<AiOutlineFieldTime size={50} />}
            />
            <StatsCard
              title="Ending at"
              stat={moment(competition.attributes?.ends_at).format(
                "DD-MM-YYYY HH:mm:ss "
              )}
              icon={<GiExtraTime size={50} />}
            />
            <StatsCard
              title="Competition Status"
              stat={competition.attributes?.status}
              icon={
                competition.attributes?.status === "ongoing" ? (
                  <BsFillPlayCircleFill size={50} />
                ) : (
                  <AiFillPauseCircle size={50} />
                )
              }
            />
          </Flex>
          <Box textAlign="center" mt={8}>
            {competition.attributes?.status === "ongoing" && (
              <Button py={15}>
                <AiFillPauseCircle size={32} />
                <Text ml={2} onClick={() => handleStatusUpdate("paused")}>
                  Pause Contest
                </Text>
              </Button>
            )}
            {competition.attributes?.status === "paused" && (
              <Button py={15} size="lg" varient="outline">
                <BsFillPlayCircleFill size={32} mr={4} />
                <Text
                  as={"span"}
                  ml={2}
                  py={4}
                  onClick={() => handleStatusUpdate("ongoing")}
                >
                  Resume Contest
                </Text>
              </Button>
            )}
          </Box>
        </Sidebar>
      </main>
    </>
  );
};

export default Contest;
